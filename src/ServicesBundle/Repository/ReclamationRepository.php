<?php

namespace ServicesBundle\Repository;

/**
 * ReclamationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReclamationRepository extends \Doctrine\ORM\EntityRepository
{

    public function findMyReclamation($id)
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where m.User = '$id' ");
        return $dqlresult->getResult();
    }

    public function ListFindByTypeUserReclamed($type)
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where   m.type LIKE '%$type%' ");
        return $dqlresult->getResult();
    }


    public function CountNotReaded()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select count(m.id) as x from ServicesBundle:Reclamation m where m.state=0 AND m.important = 0 AND m.trash=0");
        return $dqlresult->getResult();
    }

    public function CountReaded()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select count(m.id) as x from ServicesBundle:Reclamation m where m.state=1 AND m.important = 0 AND m.trash=0");
        return $dqlresult->getResult();
    }
    public function CountTrash()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select count(m.id) as x from ServicesBundle:Reclamation m where m.trash = 1 ");
        return $dqlresult->getResult();
    }
    public function CountImportant()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select count(m.id) as x from ServicesBundle:Reclamation m where  m.important = 1 AND m.trash=0");
        return $dqlresult->getResult();
    }

    public function findAll()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where m.trash = 0 AND m.important = 0");
        return $dqlresult->getResult();
    }

    public function findReaded()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where m.state = 1 AND m.important = 0 AND m.trash=0");
        return $dqlresult->getResult();
    }

    public function findUNReaded()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where m.state = 0 AND m.important = 0 AND m.trash=0");
        return $dqlresult->getResult();
    }
    public function findTrash()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where m.trash = 1 ");
        return $dqlresult->getResult();
    }
    public function findImportant()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from ServicesBundle:Reclamation m where m.important =1 AND  m.trash=0");
        return $dqlresult->getResult();
    }
    public function findProfile($username)
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from PepiniereBundle:User m where m.username = '$username'");
        return $dqlresult->getResult();
    }






    public function usersSearchajax($valeur)
    {
        return $this->getEntityManager()
            ->createQuery("select m from PepiniereBundle:User m where m.username LIKE  '$valeur%' and m.username NOT LIKE 'admin' ")
            ->getResult();
    }


    public function reclamationSearchajax($valeur)
    {
        return $this->getEntityManager()
            ->createQuery("select m from PepiniereBundle:User m where m.username LIKE  '$valeur%' and m.username NOT LIKE 'admin'")
            ->getResult();
    }



    public function findBanned()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from PepiniereBundle:User m where m.enabled = 0 and m.username NOT LIKE 'admin'");
        return $dqlresult->getResult();
    }
    public function findNotBanned()
    {
        $dqlresult=$this->getEntityManager()
            ->createQuery("select m from PepiniereBundle:User m where m.enabled = 1 and m.username NOT LIKE 'admin'");
        return $dqlresult->getResult();
    }


}
